var formID = $("#frmAutoLogOut")[0];
var lastServerActiveUTC = moment.utc($('input[name="txtServerUTC"]', formID).val()).format();
var lastBrowserActiveUTC = moment.utc(new Date()).format();
var warningShown = false;
var countdown = 30;
var idleInterval;
var logoutTimeout;
var now = moment.utc(new Date()).format();

autoSignoutPromise().then(() => {
    showWarning();
});

function autoSignoutPromise() {
    return new Promise((resolve, reject) => {

        if ((moment(now).diff(lastServerActiveUTC, 'minutes', true) > 29.5) && !warningShown)
            resolve();
        else if ((moment(now).diff(lastBrowserActiveUTC, 'minutes', true) <= 5) && (moment(now).diff(lastServerActiveUTC, 'minutes', true) > 20)) { //server timer more than 20 minute and client idle time less than 5 minutes
            clearInterval(idleInterval);
            countdown = 30;

            localStorage.setItem("lastActivity", Date.now());
            keepServerSessionAlive();
        }
        else {
            now = moment.utc(new Date()).format();

            setTimeout(() => {
                autoSignoutPromise()
                    .then(resolve)
                    .catch(reject);
            }, 60000); // check every 60 seconds
        }
    });
}

function showWarning() {
    warningShown = true;
    $("#timeoutWarningModal")
        .on("show.bs.modal", function () {
            $(this).css("display", "block");
        })
        .on("shown.bs.modal", function () {
            $(this).find("#btnStayLogged")
                .off("click")
                .on("click", resetServerSession);
            $(this).find("#btnTimeoutLogout")
                .off("click")
                .on("click", timeoutAutoLogout);
        })
        .modal('show');

    $("#timeoutCountDown").text(countdown);

    idleInterval = setInterval(function () {
        countdown--;
        if (countdown >= 0) {
            $("#timeoutCountDown").text(countdown);
        }
    }, 1000);

    logoutTimeout = setTimeout(function () {
        localStorage.setItem("forceLogout", Date.now());
        window.location.href = '/SsoAccount/SignOut?isSessionExpiring=true';
    }, 30000);
}

function resetServerSession() {
    warningShown = false;
    $("#timeoutWarningModal").modal('hide');
    keepServerSessionAlive();
    
    resetIdleTime();
    
}

function resetIdleTime() {
    clearInterval(idleInterval);
    clearTimeout(logoutTimeout);
    countdown = 30;

    localStorage.setItem("lastActivity", Date.now());       // Broadcast activity across tabs
}

function keepServerSessionAlive() {
    $.ajax({
        url: '/Session/keepServerSessionAlive',
        type: 'GET',
        success: function (response) {
            if (response.success) {
                lastServerActiveUTC = moment.utc(response.data).format();
                lastBrowserActiveUTC = moment.utc(new Date()).format();
                now = moment.utc(new Date()).format();
                localStorage.setItem("lastActivity", Date.now());               // Broadcast last browser activity across tabs
                localStorage.setItem("lastServerActivity", Date.now());         // Broadcast last server activity across tabs
                autoSignoutPromise().then(() => {
                    showWarning();
                });
            }
        },
        error: function () {
            console.error('Failed to reset session.');
        }
    });
}

function timeoutAutoLogout() {
    localStorage.setItem("forceLogout", Date.now());        // Broadcast logout to all tabs
    window.location.href = '/SsoAccount/SignOut?isSessionExpiring=true';
}


document.addEventListener('mousemove', function (e) {
    if (!warningShown) {
        lastBrowserActiveUTC = moment.utc(new Date()).format();
        resetIdleTime();
    }
});

document.addEventListener('keypress', function (e) {
    if (!warningShown) {
        lastBrowserActiveUTC = moment.utc(new Date()).format();
        resetIdleTime();
    }
});

// Listen for events from other tabs
window.addEventListener("storage", function (event) {
    if (event.key === "lastActivity") {
        resetIdleTime();
        lastBrowserActiveUTC = moment.utc(new Date()).format();
    }

    if (event.key === "lastServerActivity") {
        lastServerActiveUTC = moment.utc(now).format();
    }

    if (event.key === "forceLogout") {
        window.location.href = '/SsoAccount/SignOut?isSessionExpiring=true';
    }
});
